Listing 5.13?HDL Code for XNOR Gate—VHDL and Verilog
      
      VHDL XNOR Gate Description
       library IEEE;
       use IEEE.STD_LOGIC_1164.ALL;
       
       
       entity XOR_XNOR is
           Port (y : out std_logic; a, b : in std_logic);
       end XOR_XNOR;
       
       architecture XNORgate of XOR_XNOR is
       component nmos
       port (O1 : out std_logic; I1, I2 : in std_logic);
       end component;
       
       component pmos
       port (O1 : out std_logic; I1, I2 : in std_logic);
       end component;
       
       for all : pmos use entity work.mos (pmos_behavioral); 
       for all : nmos use entity work.mos (nmos_behavioral); 
       constant vdd : std_logic := '1';
       constant gnd : std_logic := '0';
       signal abar, bbar, s1, s2, s3 : std_logic;
       begin
       -- Invert a and b. If the complement of a and b are available,
       -- then there is no need for the following
       -- two pair (nmos and pmos) switches.
       
       p1 : pmos port map (abar, vdd, a);
       n1 : nmos port map (abar, gnd, a);
       p2 : pmos port map (bbar, vdd, b);
       n2 : nmos port map (bbar, gnd, b);
       
       --Write the pull-down combination
       n3 : nmos port map (s1, gnd, a);
       n4 : nmos port map (y, s1, bbar);
       n5 : nmos port map (s2, gnd, abar);
       n6 : nmos port map (y, s2, b);
       
       --Write the pull-up combination
       p3 : pmos port map (y, s3, a);
       p4 : pmos port map (y, s3, bbar);
       p5 : pmos port map (s3, vdd, abar);
       p6 : pmos port map (s3, vdd, b);
       
       end XNORgate;
      
      Verilog XNOR Gate Description
       module XOR_XNOR (a, b, y);
       
       input a, b;
       output y;
       
       supply1 vdd;
       supply0 gnd;
       
       /* Invert a and b. If the complement of a and b
          are available, then there is no need for the
          following two pair (nmos and pmos) switches */
       
       pmos (abar, vdd, a);
       nmos (abar, gnd, a);
       pmos (bbar, vdd, b);
       nmos (bbar, gnd, b);
       
       // Write the pull-down combination
       nmos (s1, gnd, a);
       nmos (y, s1, bbar);
       nmos (s2, gnd, abar);
       nmos (y, s2, b);
       
       // Write the pull-up combination
       pmos (y, s3, a);
       pmos (y, s3, bbar);
       pmos (s3, vdd, abar);
       pmos (s3, vdd, b);
       
       endmodule

