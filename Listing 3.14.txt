Listing 3.14?4x4-Bit Booth Algorithm—VHDL and Verilog

      VHDL 4x4-Bit Booth Algorithm
       library ieee;
       use ieee.std_logic_1164.all;
       use ieee.numeric_std.all;     
       entity booth is
       port (X, Y : in signed (3 downto 0); 
       Z : buffer signed (7 downto 0)); 
       end booth;
       architecture booth_4 of booth is
       begin
       process (X, Y)
       variable temp : signed (1 downto 0);
       variable sum : signed (7 downto 0);
       variable E1 : unsigned (0 downto 0);
       variable Y1 : signed (3 downto 0);
       begin
       sum := "00000000"; E1 := "0";
       for i in 0 to 3 loop 
       temp := X(i) & E1(0);
       Y1 := - Y;
       case temp is
           when "10" => sum (7 downto 4) :=
           sum (7 downto 4) + Y1;
           when "01" => sum (7 downto 4) := 
           sum (7 downto 4) + Y;
           when others => null;
       end case; 
       sum := sum srl 1; --This is a logical 
       --shift of one position to the right
       sum (7) := sum(6);
       
       --The above two statements perform arithmetic shift where 
       --the sign of the number is preserved after the shift.
       
       
       E1(0) := x(i);
       end loop;
           if (y = "1000") then 
       
       --If Y = 1000; then according to our code,
       --Y1 = 1000 (-8 not 8 because Y1 is 4 bits only).
       --The statement sum = -sum adjusts the answer.
       
               sum := - sum;
           end if;
       
       z <= sum; 
       end process;
       end booth_4;
      
      Verilog 4x4-Bit Booth Algorithm
       module booth (X, Y, Z);
       input signed [3:0] X, Y;
       output signed [7:0] Z;
       reg signed [7:0] Z;
       reg [1:0] temp;
       integer i;
       reg E1;
       reg [3:0] Y1;
       always @ (X, Y)
       begin
       Z = 8'd0;
       E1 = 1'd0;
       for (i = 0; i < 4; i = i + 1)
       begin
       temp = {X[i], E1};
       
           //The above statement is catenation
       
       Y1 = - Y;
       
           //Y1 is the 2’ complement of Y
       
       case (temp)
       2'd2 : Z [7 : 4] = Z [7 : 4] + Y1;
       2'd1 : Z [7 : 4] = Z [7 : 4] + Y;
       default : begin end
       endcase
       Z = Z >> 1;
       /*The above statement is a logical shift of one position to
           the right*/
       
       Z[7] = Z[6];
       /*The above two statements perform arithmetic shift where
       the sign of the number is preserved after the shift. */
       
       E1 = X[i];
           end
       if (Y == 4'd8) 
       
       /*If Y = 1000; then according to our code,
       Y1 = 1000 (-8 not 8, because Y1 is 4 bits only).
       The statement sum = - sum adjusts the answer.*/
       
           begin
               Z = - Z;
           end
       
       end
       
       endmodule

