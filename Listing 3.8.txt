Listing 3.8?HDL Code for a 3-Bit Binary Counter Using the Case Statement
      
      VHDL 3-Bit Binary Counter Case Statement Description
       library IEEE;
       use IEEE.STD_LOGIC_1164.ALL;
       entity CT_CASE is
           port (clk, clr : in std_logic; 
           q : buffer std_logic_vector (2 downto 0));
       end CT_CASE;
       architecture ctr_case of CT_CASE is
       begin
       ctr : process(clk)
       variable temp : std_logic_vector (2 downto 0) := "101";
       --101 is the initial value, so the counter starts from 110
           begin
           if rising_edge (clk) then
               if clr = '0' then
                   case temp is
                       when "000" => temp := "001";
                       when "001" => temp := "010";
                       when "010" => temp := "011";
                       when "011" => temp := "100";
                       when "100" => temp := "101";
                       when "101" => temp := "110";
                       when "110" => temp := "111";
                       when "111" => temp := "000";
                       when others => temp := "000";
                   end case;
               else
               temp := "000";
               end if;
           end if;
           q <= temp;
           end process ctr;
       
       end ctr_case;
      
      Verilog 3-Bit Binary Counter Case Statement Description
       module CT_CASE (clk, clr, q);
       input clk, clr;
       
       output [2:0] q;
       reg [2:0] q;
       initial /* The initial procedure is to force the counter
              to start from initial count q=110 */
                                       
       q = 3'b101;
       always @ (posedge clk)
       begin
       if (clr == 0)
       begin
           case (q)
               3'd0 : q = 3'd1;
               3'd1 : q = 3'd2;
               3'd2 : q = 3'd3;
               3'd3 : q = 3'd4;
               3'd4 : q = 3'd5;
               3'd5 : q = 3'd6;
               3'd6 : q = 3'd7;
               3'd7 : q = 3'd0;
           endcase
       end
       else
       q = 3'b000;
       end
       endmodule

